using System;
using System.Linq;
using System.Threading.Tasks;

namespace TelegramBot
{
    public interface IAbility
    {
        public Task Execute(Game game);
    }

    public class Nothing : IAbility
    {
        public async Task Execute(Game game)
        {
            game.State = new PresidentElectionState(game);
            Console.WriteLine($"[{DateTime.Now}] Nothing happens");
            await game.State.Step();
        }
    }

    public class CheckRole : IAbility
    {
        public async Task Execute(Game game)
        {
            Console.WriteLine($"[{DateTime.Now}] CheckRole executed");
            await game.SendToChatAsync(@"–ü—Ä—ç–∑—ñ–¥—ç–Ω—Ü–∫–∞–µ –ø—Ä–∞–≤–∞ ""üîé –î–∞—Å–ª–µ–¥–∞–≤–∞–Ω–Ω–µ –ª–∞—è–ª—å–Ω–∞—Å—Ü—ñ"" –¥–∞—Å—Ç—É–ø–Ω–∞ –ø—Ä—ç–∑—ñ–¥—ç–Ω—Ç—É");
            game.State = new RoleCheckAbilityState(game);
            await game.SendChoiceAsync(game.Board.President, game.Players.Where(p => !p.IsAlive || p == game.Board.President).ToList(),"–ß—ã—é —Ä–æ–ª—é –≤—ã —Ö–æ—á–∞—Ü–µ –¥–∞–≤–µ–¥–∞—Ü—Ü–∞?");
        }
    }
    
    public class ShowLaws : IAbility
    {
        public async Task Execute(Game game)
        {
            Console.WriteLine($"[{DateTime.Now}] ShowLaws executed");
            await game.SendToChatAsync($"–ü—Ä—ç–∑—ñ–¥—ç–Ω—Ü–∫–∞–µ –ø—Ä–∞–≤–∞ \"üîÆ –ü—Ä–∞–≥–ª—è–¥ –∑–∞–∫–æ–Ω–∞—û\" –¥–∞—Å—Ç—É–ø–Ω–∞ –ø—Ä—ç–∑—ñ–¥—ç–Ω—Ç—É");
            await game.Board.President.SendMessageAsync($"–ù–∞—Å—Ç—É–ø–Ω—ã—è –∑–∞–∫–æ–Ω—ã: {string.Join(" - ", game.Board.Deck.ShowLaws().Select(l => l switch {Law.Fascist => "—Ñ–∞—à—ã—Å—Ü–∫—ñ", Law.Liberal => "–ª—ñ–±–µ—Ä–∞–ª—å–Ω—ã"}))}");
            game.State = new PresidentElectionState(game);
            await game.State.Step();
        }
    }
    
    public class EarlyElections : IAbility
    {
        public async Task Execute(Game game)
        {
            Console.WriteLine($"[{DateTime.Now}] EarlyElections");
            game.EarlyElection = true;
            game.EarlyElectedPresident = game.Board.President;
            game.State = new EarlyElectionState(game);
            await game.SendToChatAsync($"–ü—Ä—ç–∑—ñ–¥—ç–Ω—Ü–∫–∞–µ –ø—Ä–∞–≤–∞ \"üëî –ü–∞–∑–∞—á–∞—Ä–≥–æ–≤—ã—è –≤—ã–±–∞—Ä—ã\" –¥–∞—Å—Ç—É–ø–Ω–∞ –ø—Ä—ç–∑—ñ–¥—ç–Ω—Ç—É");
            await game.SendChoiceAsync(game.Board.President, game.Players.Where(p => !p.IsAlive || p == game.Board.President).ToList(),"–ö–∞–≥–æ –∞–±—Ä–∞—Ü—å –ø—Ä—ç–∑—ñ–¥—ç–Ω—Ç–∞–º –Ω–∞ –ø–∞–∑–∞—á–∞—Ä–≥–æ–≤—ã—Ö –≤—ã–±–∞—Ä–∞—Ö?");
        }
    }
    
    public class Kill : IAbility
    {
        public async Task Execute(Game game)
        {
            Console.WriteLine($"[{DateTime.Now}] Kill executed");
            game.State = new KillAbilityState(game);
            await game.SendToChatAsync($"–ü—Ä—ç–∑—ñ–¥—ç–Ω—Ü–∫–∞–µ –ø—Ä–∞–≤–∞ \"üó° –ó–Ω—ñ—à—á—ç–Ω–Ω–µ\" –¥–∞—Å—Ç—É–ø–Ω–∞ –ø—Ä—ç–∑—ñ–¥—ç–Ω—Ç—É");
            await game.SendChoiceAsync(game.Board.President, game.Players.Where(p => !p.IsAlive || p == game.Board.President).ToList(),"–ö–∞–≥–æ –∑–∞–±—ñ—Ü—å?");
        }
    }
    public class LiberalWin : IAbility
    {
        public async Task Execute(Game game)
        {
            Console.WriteLine($"[{DateTime.Now}] LiberalWins");  
            await game.SendToChatAsync($"–õ—ñ–±–µ—Ä–∞–ª—ã –ø–µ—Ä–∞–º–∞–≥–ª—ñ");
            game.GameStatus = GameStatus.LiberalWin;
            game.State = new EndGameState(game);
            await game.State.Step();
        }
    }
    
    public class FascistWin : IAbility
    {
        public async Task Execute(Game game)
        {
            Console.WriteLine($"[{DateTime.Now}] FascistWin");   
            await game.SendToChatAsync($"–§–∞—à—ã—Å—Ç—ã –ø–µ—Ä–∞–º–∞–≥–ª—ñ");
            game.GameStatus = GameStatus.FascistWin;
            game.State = new EndGameState(game);
            await game.State.Step();
        }
    }
} 